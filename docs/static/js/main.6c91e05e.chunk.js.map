{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6LA8BeA,EA3BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCNlBG,EAAc,SAAC,GAAmB,EAAlBC,GAAmB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAClC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCLHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAACC,GAAO,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATvB,kBAaZY,GAbY,4CAAH,sDCIPK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAErB,ECJwB,SAACA,GACzB,MAA0BrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAK,SAAAC,GACFH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGvB,CAACb,IAEIc,EDZwBK,CAAanB,GAAhCU,EAAZ,EAAOJ,KAAaO,EAApB,EAAoBA,QAEpB,OACI,qCACI,6BAAKb,IACJa,GAAW,wCACX,qBAAKjB,UAAU,YAAf,SAEOc,EAAOF,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aEK/B2B,EAjBM,WACjB,MAAoCzC,mBAAS,CAAC,WAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ2C,EAAWb,KAAI,SAACR,GAAD,OAAc,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCR/DsB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6c91e05e.chunk.js","sourcesContent":["import {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value)\r\n    }\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()\r\n\r\n        if(inputValue.trim().length > 2){            \r\n            setCategories((cats) => [inputValue, ...cats])\r\n            setInputValue('')        \r\n        }\r\n\r\n    }\r\n    return ( \r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={handleInputChange}/>\r\n        </form>\r\n     );\r\n}\r\n//Vamos a obligar a usar la función setCategories\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n \r\nexport default AddCategory;","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const getGifs = async(category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=CrEAOue8VpcjPYg0t7FbgEE3olJ4Hato`;        \r\n    const resp = await fetch(url)\r\n    const {data} = await resp.json()\r\n\r\n    const gifs = data.map((img)=>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return(gifs)\r\n}    \r\n","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem'\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category)    \r\n    \r\n    return (\r\n        <>\r\n            <h3>{category}</h3>                  \r\n            {loading && <p>Loading</p> }\r\n           { <div className=\"card-grid\">\r\n                {\r\n                    images.map(img=>(\r\n                        <GifGridItem key={img.id} {...img}/>\r\n                    ))\r\n                }            \r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n    //no pueden ser async, pero puede tener dentro algo asíncrono\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then(imgs=>{\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    },[category]) \r\n\r\n    return state;\r\n}\r\n","import {useState} from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {    \r\n    const [categories, setCategories] = useState(['soccer'])    \r\n\r\n    return ( \r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr/>\r\n            <ol> \r\n                {\r\n                    categories.map((category) => <GifGrid key={category} category={category}/> )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\nReactDOM.render(  \n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}